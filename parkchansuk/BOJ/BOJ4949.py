# BOJ 4949. 균형잡힌 세상 / D2
'''
세계는 균형이 잘 잡혀있어야 한다. 양과 음, 빛과 어둠 그리고 왼쪽 괄호와 오른쪽 괄호처럼 말이다.

정민이의 임무는 어떤 문자열이 주어졌을 때, 괄호들의 균형이 잘 맞춰져 있는지 판단하는 프로그램을 짜는 것이다.

문자열에 포함되는 괄호는 소괄호("()") 와 대괄호("[]")로 2종류이고, 문자열이 균형을 이루는 조건은 아래와 같다.

- 모든 왼쪽 소괄호("(")는 오른쪽 소괄호(")")와만 짝을 이뤄야 한다.
- 모든 왼쪽 대괄호("[")는 오른쪽 대괄호("]")와만 짝을 이뤄야 한다.
- 모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.
- 모든 괄호들의 짝은 1:1 매칭만 가능하다. 즉, 괄호 하나가 둘 이상의 괄호와 짝지어지지 않는다.
- 짝을 이루는 두 괄호가 있을 때, 그 사이에 있는 문자열도 균형이 잡혀야 한다.

정민이를 도와 문자열이 주어졌을 때 균형잡힌 문자열인지 아닌지를 판단해보자.
'''


import sys
while True: # 몇개인지 모르는 여러줄의 input을 받는 방법!!!
    arr = list(sys.stdin.readline()) # 한줄을 받음

    if arr[0] == '.': # 한 줄이 .으로만 이루어진 경우 while문 밖으로
        break
    else: # 아니면 괄호 맞추기 시작
        stk=[] # 스택 초기화
        ans = 'yes' # 일단 ans를 yes로 하고 no가 나오는 경우를 밑에서 정리함
        for i in range(len(arr)):
            if arr[i] in ['[', '(']: # arr에 [, ( 가 있으면 넣어줘
                stk.append(arr[i])
            elif arr[i] == ')': # )가 나오면 
                if stk:
                    if stk[-1] == '(': # 마지막 스택이 (면 묶어주면서 뽑기
                        stk.pop(-1)
                    else:
                        ans = 'no' # 아니면 no
                else:
                    ans = 'no' # 닫는 괄호가 남아있는데 스택이 비어있으면 no
            elif arr[i] == ']':
                if stk:
                    if stk[-1] == '[':
                        stk.pop(-1)
                    else:
                        ans = 'no'
                else:
                    ans = 'no'
        if stk:
            ans = 'no' # 과정이 다 끝났는데 스택이 남아있으면 no

        print(ans)