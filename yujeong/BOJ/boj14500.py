# 14500. 테트로미노

import sys
input = sys.stdin.readline

# 테트로미노 블록 모양대로 탐색하기 위한 델타 좌표 저장
block = [
    [(0, 1), (0, 2), (0, 3)],   # ㅡ 모양 회전
    [(1, 0), (2, 0), (3, 0)],   
    [(0, 1), (1, 0), (1, 1)],   # ㅁ 모양
    [(1, 0), (2, 0), (2, 1)],   # L 모양 대칭 & 회전
    [(0, 1), (1, 0), (2, 0)],
    [(0, 1), (0, 2), (1, 2)],
    [(1, 0), (2, 0), (2, -1)],
    [(1, 0), (1, 1), (1, 2)],
    [(0, 1), (0, 2), (1, 0)],
    [(0, 1), (1, 1), (2, 1)],
    [(1, 0), (1, -1), (1, -2)],
    [(1, 0), (1, 1), (2, 1)],    # S 모양 대칭 & 회전
    [(0, 1), (1, 0), (1, -1)], 
    [(1, 0), (1, -1), (2, -1)],
    [(0, 1), (1, 1), (1, 2)],
    [(0, 1), (0, 2), (1, 1)],   # ㅗ 모양 회전 
    [(1, 0), (1, -1), (2, 0)],
    [(1, 0), (1, -1), (1, 1)],
    [(1, 0), (1, 1), (2, 0)]
]

def search(x, y):   # 주어진 좌표에서 각 블록 모양대로 탐색하기 위한 함수 search()
    global max_v
    for b in block:      
        cnt = 0
        temp = board[x][y]
        for dx, dy in b:            
            nx, ny = x+dx, y+dy
            if 0<=nx<N and 0<=ny<M:
                cnt += 1
                temp += board[nx][ny]
        if cnt == 3:    # 4칸 모두 유효한 칸으로 탐색한 경우
            if temp > max_v:    # 기존 최댓값보다 크면 갱신
                max_v = temp

N, M = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(N)]

max_v = 0
for i in range(N):
    for j in range(M):
        search(i, j)

print(max_v)